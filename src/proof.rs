// Copyright 2022 Aztec
// Copyright 2025 Horizen Labs, Inc.
// SPDX-License-Identifier: Apache-2.0 or MIT

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use ark_bn254_ext::{CurveHooks, Fq};
use ark_ec::AffineRepr;
use ark_ff::{AdditiveGroup, PrimeField};
use snafu::Snafu;

use crate::{
    constants::{
        CONST_PROOF_SIZE_LOG_N, LIBRA_COMMITMENTS_LENGTH, LIBRA_POLY_EVALS_LENGTH,
        NUMBER_OF_ENTITIES, ZK_BATCHED_RELATION_PARTIAL_LENGTH,
    },
    errors::GroupError,
    utils::read_u256,
    Fr, G1, PROOF_SIZE, U256, ZK_PROOF_SIZE,
};
use alloc::string::String;
use alloc::{format, vec::Vec};
use core::ops::{BitOr, Shl};

/// Unified enum for handling errors of all flavors.
#[derive(Debug, PartialEq, Snafu)]
pub enum ProofError {
    #[snafu(display(
        "Incorrect buffer size. Expected: {}; Got: {}",
        expected_size,
        actual_size
    ))]
    IncorrectBufferSize {
        expected_size: usize,
        actual_size: usize,
    },
    #[snafu(display(
        "Invalid slice size. Expected: {}; Got: {}",
        expected_length,
        actual_length
    ))]
    InvalidSliceLength {
        expected_length: usize,
        actual_length: usize,
    },
    #[snafu(display("Point for proof commitment field '{field:?}' is not on curve"))]
    PointNotOnCurve { field: String },
    // // #[snafu(display("Point is not in the correct subgroup"))]
    // // PointNotInCorrectSubgroup,
    // #[snafu(display("Value is not a member of Fq"))]
    // NotMember,
    #[snafu(display("Other error: {message:?}"))]
    OtherError { message: String },
    #[snafu(display("Shpleminy pairing check failed"))]
    ShpleminiPairingCheckFailed,
    #[snafu(display("Consistency check failed. Cause: {message:?}"))]
    ConsistencyCheckFailed { message: &'static str },
}

#[derive(Debug, Eq, PartialEq)]
pub enum ProofType {
    Standard([u8; PROOF_SIZE]),
    ZK([u8; ZK_PROOF_SIZE]),
}

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
pub struct G1ProofPoint {
    pub x_0: U256,
    pub x_1: U256,
    pub y_0: U256,
    pub y_1: U256,
}

// This is undesirable... TODO: Remove if possible.
impl Default for G1ProofPoint {
    fn default() -> Self {
        Self {
            x_0: U256::zero(),
            x_1: U256::zero(),
            y_0: U256::zero(),
            y_1: U256::zero(),
        }
    }
}

impl TryFrom<[u8; 128]> for G1ProofPoint {
    type Error = ();

    fn try_from(data: [u8; 128]) -> Result<Self, Self::Error> {
        let x_0 = read_u256(&data[..32])?;
        let x_1 = read_u256(&data[32..64])?;
        let y_0 = read_u256(&data[64..96])?;
        let y_1 = read_u256(&data[96..])?;

        // IMPORTANT: Note that validation is skipped here but
        // is instead performed when we try to convert to G1.

        Ok(Self { x_0, x_1, y_0, y_1 })
    }
}

fn read_g1_proof_point(data: &[u8], offset: &mut usize) -> Result<G1ProofPoint, ProofError> {
    let start: usize = *offset;
    let end: usize = *offset + 128;
    if start >= data.len() {
        // Q: Maybe define a new variant for this case?
        return Err(ProofError::InvalidSliceLength {
            expected_length: 128,
            actual_length: 0,
        });
    } else if end > data.len() {
        return Err(ProofError::InvalidSliceLength {
            expected_length: 128,
            actual_length: data.len() - start,
        });
    }

    let chunk: [u8; 128] = data[start..end]
        .try_into()
        .expect("Not enough bytes for G1ProofPoint");

    G1ProofPoint::try_from(chunk)
        .map_err(|_| ProofError::OtherError {
            message: format!("Failed reading G1 Proof Point at offset {}", offset),
        })
        .inspect(|_| {
            *offset += 128;
        })
}

fn read_fr(data: &[u8], offset: &mut usize) -> Result<Fr, ProofError> {
    let start: usize = *offset;
    let end: usize = *offset + 32;
    if start >= data.len() {
        // Q: Maybe define a new variant for this case?
        return Err(ProofError::InvalidSliceLength {
            expected_length: 32,
            actual_length: 0,
        });
    } else if end > data.len() {
        return Err(ProofError::InvalidSliceLength {
            expected_length: 32,
            actual_length: data.len() - start,
        });
    }

    let chunk: [u8; 32] = data[start..end]
        .try_into()
        .expect("Not enough bytes for field element");
    // TODO: DOUBLE-CHECK
    Ok(Fr::from_be_bytes_mod_order(&chunk)).inspect(|_| {
        *offset += 32;
    })
}

#[derive(Debug, Hash, Eq, PartialEq)]
pub enum ProofCommitmentField {
    SHPLONK_Q,
    GEMINI_MASKING_POLY,
    W_1,
    W_2,
    W_3,
    W_4,
    Z_PERM,
    LOOKUP_INVERSES,
    LOOKUP_READ_COUNTS,
    LOOKUP_READ_TAGS,
    LIBRA_COMMITMENTS(usize),
    GEMINI_FOLD_COMMS(usize),
    KZG_QUOTIENT,
}

impl ProofCommitmentField {
    pub fn to_string(&self) -> String {
        match self {
            ProofCommitmentField::SHPLONK_Q => "SHPLONK_Q".into(),
            ProofCommitmentField::GEMINI_MASKING_POLY => "GEMINI_MASKING_POLY".into(),
            ProofCommitmentField::W_1 => "W_1".into(),
            ProofCommitmentField::W_2 => "W_2".into(),
            ProofCommitmentField::W_3 => "W_3".into(),
            ProofCommitmentField::W_4 => "W_4".into(),
            ProofCommitmentField::Z_PERM => "Z_PERM".into(),
            ProofCommitmentField::LOOKUP_INVERSES => "LOOKUP_INVERSES".into(),
            ProofCommitmentField::LOOKUP_READ_COUNTS => "LOOKUP_READ_COUNTS".into(),
            ProofCommitmentField::LOOKUP_READ_TAGS => "LOOKUP_READ_TAGS".into(),
            ProofCommitmentField::LIBRA_COMMITMENTS(i) => format!("LIBRA_COMMITMENTS_{}", i),
            ProofCommitmentField::GEMINI_FOLD_COMMS(i) => format!("GEMINI_FOLD_COMMS_{}", i),
            ProofCommitmentField::KZG_QUOTIENT => "KZG_QUOTIENT".into(),
        }
    }
}

pub(crate) fn convert_proof_point<H: CurveHooks>(
    g1_proof_point: G1ProofPoint,
) -> Result<G1<H>, GroupError> {
    const N: u32 = 136;
    let x = Fq::from_bigint(g1_proof_point.x_0.bitor(g1_proof_point.x_1.shl(N)))
        .expect("Should always succeed");
    let y = Fq::from_bigint(g1_proof_point.y_0.bitor(g1_proof_point.y_1.shl(N)))
        .expect("Should always succeed");

    if x == Fq::ZERO && y == Fq::ZERO {
        return Ok(G1::<H>::identity());
    }

    let point = G1::<H>::new_unchecked(x, y);

    if !point.is_on_curve() {
        return Err(GroupError::NotOnCurve);
    }

    // The following cannot happen for G1 with the BN254 curve.
    // if !point.is_in_correct_subgroup_assuming_on_curve() {...}

    Ok(point)
}

#[derive(Debug, Eq, PartialEq)]
pub struct ZKProof {
    // Commitments to wire polynomials
    pub w1: G1ProofPoint,
    pub w2: G1ProofPoint,
    pub w3: G1ProofPoint,
    pub w4: G1ProofPoint,
    // Commitments to logup witness polynomials
    pub lookup_read_counts: G1ProofPoint,
    pub lookup_read_tags: G1ProofPoint,
    pub lookup_inverses: G1ProofPoint,
    // Commitment to grand permutation polynomial
    pub z_perm: G1ProofPoint,
    pub libra_commitments: [G1ProofPoint; LIBRA_COMMITMENTS_LENGTH],
    // Sumcheck
    pub libra_sum: Fr,
    pub sumcheck_univariates: [[Fr; ZK_BATCHED_RELATION_PARTIAL_LENGTH]; CONST_PROOF_SIZE_LOG_N],
    pub sumcheck_evaluations: [Fr; NUMBER_OF_ENTITIES],
    pub libra_evaluation: Fr,
    // ZK
    pub gemini_masking_poly: G1ProofPoint,
    pub gemini_masking_eval: Fr,
    // Shplemini
    pub gemini_fold_comms: [G1ProofPoint; CONST_PROOF_SIZE_LOG_N - 1],
    pub gemini_a_evaluations: [Fr; CONST_PROOF_SIZE_LOG_N],
    pub libra_poly_evals: [Fr; LIBRA_POLY_EVALS_LENGTH],
    pub shplonk_q: G1ProofPoint,
    pub kzg_quotient: G1ProofPoint,
}

impl TryFrom<&[u8]> for ZKProof {
    type Error = ProofError;

    fn try_from(proof_bytes: &[u8]) -> Result<Self, Self::Error> {
        if proof_bytes.len() != ZK_PROOF_SIZE {
            return Err(ProofError::IncorrectBufferSize {
                expected_size: ZK_PROOF_SIZE,
                actual_size: proof_bytes.len(),
            });
        }

        let mut offset = 0;

        // Commitments
        let w1 = read_g1_proof_point(proof_bytes, &mut offset)?;
        let w2 = read_g1_proof_point(proof_bytes, &mut offset)?;
        let w3 = read_g1_proof_point(proof_bytes, &mut offset)?;

        // Lookup / Permutation Helper Commitments
        let lookup_read_counts = read_g1_proof_point(proof_bytes, &mut offset)?;
        let lookup_read_tags = read_g1_proof_point(proof_bytes, &mut offset)?;
        let w4 = read_g1_proof_point(proof_bytes, &mut offset)?;
        let lookup_inverses = read_g1_proof_point(proof_bytes, &mut offset)?;
        let z_perm = read_g1_proof_point(proof_bytes, &mut offset)?;

        let mut libra_commitments = [G1ProofPoint::default(); LIBRA_COMMITMENTS_LENGTH];
        libra_commitments[0] = read_g1_proof_point(proof_bytes, &mut offset)?;

        let libra_sum = read_fr(proof_bytes, &mut offset)?;

        // Sumcheck univariates
        let mut sumcheck_univariates =
            [[Fr::ZERO; ZK_BATCHED_RELATION_PARTIAL_LENGTH]; CONST_PROOF_SIZE_LOG_N];

        for i in 0..CONST_PROOF_SIZE_LOG_N {
            for j in 0..ZK_BATCHED_RELATION_PARTIAL_LENGTH {
                sumcheck_univariates[i][j] = read_fr(proof_bytes, &mut offset)?;
            }
        }

        // Sumcheck evaluations
        let sumcheck_evaluations = (0..NUMBER_OF_ENTITIES)
            .map(|_| {
                read_fr(proof_bytes, &mut offset)
                    .expect("Should always be able to read field element here")
            })
            .collect::<Vec<Fr>>()
            .try_into()
            .expect("Should always be able to convert to array");

        let libra_evaluation = read_fr(proof_bytes, &mut offset)?;

        libra_commitments[1] = read_g1_proof_point(proof_bytes, &mut offset)?;
        libra_commitments[2] = read_g1_proof_point(proof_bytes, &mut offset)?;

        dbg!(libra_commitments);

        let gemini_masking_poly = read_g1_proof_point(proof_bytes, &mut offset)?;

        dbg!(gemini_masking_poly);

        let gemini_masking_eval = read_fr(proof_bytes, &mut offset)?;

        // Gemini
        // Read gemini fold univariates
        let gemini_fold_comms = (0..(CONST_PROOF_SIZE_LOG_N - 1))
            .map(|_| {
                read_g1_proof_point(proof_bytes, &mut offset)
                    .expect("Should always be able to read a G1ProofPoint here")
            })
            .collect::<Vec<_>>()
            .try_into()
            .expect("Should always be able to convert to array");
        // let mut gemini_fold_comms: [G1ProofPoint<H>; CONST_PROOF_SIZE_LOG_N - 1];
        // for i in 0..(CONST_PROOF_SIZE_LOG_N - 1) {
        //     gemini_fold_comms[i] = read_g1_proof_point::<H>(proof_bytes, &mut offset)?;
        // }

        // Read gemini a evaluations
        let gemini_a_evaluations = (0..CONST_PROOF_SIZE_LOG_N)
            .map(|_| {
                read_fr(proof_bytes, &mut offset)
                    .expect("Should always be able to read field element here")
            })
            .collect::<Vec<Fr>>()
            .try_into()
            .expect("Should always be able to convert to array");
        // let mut gemini_a_evaluations: [Fr; CONST_PROOF_SIZE_LOG_N];
        // for i in 0..CONST_PROOF_SIZE_LOG_N {
        //     gemini_a_evaluations[i] = read_fr(proof_bytes, &mut offset)?;
        // }

        // let mut libra_poly_evals: [Fr; 4];
        // for i in 0..4 {
        //     libra_poly_evals[i] = read_fr(proof_bytes, &mut offset)?;
        // }
        let libra_poly_evals: [Fr; LIBRA_POLY_EVALS_LENGTH] = (0..LIBRA_POLY_EVALS_LENGTH)
            .map(|_| {
                read_fr(proof_bytes, &mut offset)
                    .expect("Should always be able to read field element here")
            })
            .collect::<Vec<Fr>>()
            .try_into()
            .expect("Should always be able to convert to array");

        // Shplonk
        let shplonk_q = read_g1_proof_point(proof_bytes, &mut offset)?;
        // KZG
        let kzg_quotient = read_g1_proof_point(proof_bytes, &mut offset)?;

        Ok(Self {
            w1,
            w2,
            w3,
            w4,
            lookup_read_counts,
            lookup_read_tags,
            lookup_inverses,
            z_perm,
            libra_commitments,
            libra_sum,
            sumcheck_univariates,
            sumcheck_evaluations,
            libra_evaluation,
            gemini_masking_poly,
            gemini_masking_eval,
            gemini_fold_comms,
            gemini_a_evaluations,
            libra_poly_evals,
            shplonk_q,
            kzg_quotient,
        })
    }
}

#[cfg(test)]
mod should {
    use super::*;
    use rstest::{fixture, rstest};

    #[fixture]
    fn valid_zk_proof() -> [u8; ZK_PROOF_SIZE] {
        hex_literal::hex!(
            "
            000000000000000000000000000000a16555b44bbe764b90975aa0d52b0ba43c
            0000000000000000000000000000000000041100eba196005627bb28e3b6ec82
            00000000000000000000000000000056bdbce2630a7f22e71e673b906b6e683b
            00000000000000000000000000000000000fb00382b00c68e7151406a5653c37
            000000000000000000000000000000fd298ac95bf5e22a727677f4e3feded87a
            00000000000000000000000000000000002f86305761ab79bb62c1c216951574
            00000000000000000000000000000038b6ae11f70a50117068c1567014454de0
            000000000000000000000000000000000017b872e686f2138d8bd7f2466998e1
            00000000000000000000000000000033bd1c80b1b2e93d946c5bdbe955824abe
            00000000000000000000000000000000000c0ae686efc0389c91338aa6b0cae6
            00000000000000000000000000000060a26a8b7dafe53885a7672bd835c3a043
            00000000000000000000000000000000002a8b6ee1de1fdc138326fc77d3c1d5
            0000000000000000000000000000000ea3197280d9c1f581c6aee5fd13e5ab99
            000000000000000000000000000000000017e9156eb419522304bf90815b70e8
            000000000000000000000000000000c17c84cea29046525b7ed886d4a7cb2056
            0000000000000000000000000000000000029bae5a451212815e1f97f3a49f4a
            0000000000000000000000000000000ea3197280d9c1f581c6aee5fd13e5ab99
            000000000000000000000000000000000017e9156eb419522304bf90815b70e8
            000000000000000000000000000000c17c84cea29046525b7ed886d4a7cb2056
            0000000000000000000000000000000000029bae5a451212815e1f97f3a49f4a
            000000000000000000000000000000745cf398bbdc7e828c7bf39d2c1c03c8a4
            00000000000000000000000000000000001056c697ca5fc1006ca0cde02c1a48
            0000000000000000000000000000009d0b7421bd78783b1e4104f00b0f9bb210
            000000000000000000000000000000000015318df78da61666a7513b6dabb991
            00000000000000000000000000000093393690eea2b23aa371668390fda485a6
            00000000000000000000000000000000000daa1a135cb4bcd86e71084644e44e
            000000000000000000000000000000e8bd00f425041f28a0c460aa5fae2657e9
            000000000000000000000000000000000023aed290896d5a47c398c592b3f7b8
            0000000000000000000000000000008feee4545229b0adadb897b84c1247b41c
            00000000000000000000000000000000001346d9943283056206214e7105893d
            0000000000000000000000000000002bbde89b71569a202f06a0ac56cfde5b7a
            000000000000000000000000000000000023f932fd8d02cedb42bdebb6f5b8c7
            000000000000000000000000000000378de8d6ba0357cfc8b3314cbf51335448
            0000000000000000000000000000000000262c218f39137eeb9b8cf6243e8eeb
            000000000000000000000000000000cbbdd0b207a6bdc1638e55416f17c478f7
            000000000000000000000000000000000004981a0fcc24d4b1638c2edf7c00c9
            183bb8c08abd310b8ee6f54b9f0d11f9acf5af3322eff97117e27cd1fb914403
            0b5fc8809b42f126f78b30bb3235f8e750d72b168dec26eca5e552be1e753027
            0c4b6947417efbf08d85ccbc50ab0d3e482a9177cadd39261ff1a138293f0ab9
            266160363945a1656d56f018a39bbb901b069210e6a0de4a47f28500b97c86b9
            2ddcb3c2f973fd9c328d43858ce56c4d742088370d93d2e41130ea77f5f0b878
            288adee511ac0508290bb3b6399385f4d8b7c47cb173430dbb9dd137dc111c6e
            0654c7e156160001983503446ab7e1b60f50317457d8e48b47db5922625f3add
            06865faad2b49c820be7ae26cf0ef8fd0e261fbfb6408aefac35ccb12c9d86a4
            16ac2a4abf42c5ce9d7aacafecbba3b6b6fae9d0c6f8b69fec1e9cc8ade25eb7
            0147ea230b93f9170cd91dbfcbc42fc2010e4281638d9ddcf491810e45aef6da
            1ac97ff6b66f60a9e7ae9404c63fe0ced6edec0ccb260c7568975d0986a943d0
            2103323ed212b5787b610f300e584fd6e55d15edcd324d4aad620fd2b4bd3cdb
            10d0583cae2ef628375e1ca34b2790eca5a8b884388914de230bde3f0ec8fc7b
            28fd2533cf95486d23057d2987b704e3c2e85707b2f3cb5981446c3d5e93ef6a
            0ae0f6c56d004b6a4f653cfad7c4d3550453dbba4a4c163ae3956b5e00f587d9
            0ba495ac32634e2ca84845ee2968f2ffac30ad4f70e6a11078c389082d3ddbae
            27e3396062ee2509dbc34b375410b8b22005540e2eddfbfa51584ecd223f0d4b
            09cc019ce18006abef9bc1082c29bc120849d351f92996ebfc72b6732e7a174e
            101ba638dc888f1b0840fb54287611f8731e7b4907d5535772c653451dfdb46b
            198c4eb24b7c3c46ad6dd7c4ebd9d1a46db4ad794a061b57a523dfba8577cc00
            0c2f049cf2eb7af7477ecf02369e1b4b3a89d42b6a14258d21bfe1f9da27ebda
            00f4872855e6ac90a44c45deb0a331b798c8dbc93c76a2f7dec6c5d7dfd3de9c
            2cab9fa37bfed4e5f7dab67bd68762271654ca15f026bd92a2aad95adfda8dd0
            13fefe213e5879b9c242c0aff7b6547255e7e0e382a2428afdf9af238b1757da
            1d77740871306dacaadf71244a47d096f7c1a4392213c6fafe755ae965e7628b
            1c23316b7b33ead42514b0193bf8a6d67e6dfb8d547da4fe4452c608c94fd37f
            24d7e69e9cbaeb1020c380a6cfd30bfbf53008d43026cb0761ed147836804dee
            0d336958f1bd64306cc407148d82a9fc6bc16733a1180b0de42164431921e4e0
            2d0e20f5af004556c6dcf7f18e1effa4d2d62146743f99891944ac28d973adfe
            097c88a041f9d6d5c2a1eee838f7ee4b30f85707ae74d69057deb08ccfdb4e80
            1d85a39b3381c12778b6aaaf9efa0e9d95aef61ab678958ed9f4fa419b6ac2bb
            0425ad8947dc4e65dc6d7ea9d3199c64550d9429c364b9fae1c3a7c854604af7
            064d14982cfda35331834b29ff6abb1946fabda8e4b5610ddca881d70c80e217
            07dccceffa63e9b6c003417157d65e4d4d11ead3ab7a67ec7a0c2024d5b3aa79
            1c594727581418b4bd86e842dd5eb7e1addf03fea05bed90c68176149d123ff7
            0a6b2cdffa6582495c1ab4dcb6e634dfcb0dbc04683a04dbfe09993e817aeb62
            0fc82ac2c4d3ce2053296788d414d10b6f056e4c3154b02ff788feae27f39731
            12a4cab20609aa76255540c5cd5261ed44b3c6261b7d023285bf0443d12846e1
            0c52bf07cfda5bc41c7879749fad2a1b15b3f6ba0ee8db795cedb39190fbbf9f
            208134da50333103917b4a9ffe05d8a3de78bfcb102ecc0bc7f65f8ac38648fc
            1ec7f581f084693091db233bbd332c1bed21ff4d6035231318e3ba768ce6b73d
            2818342dcbdfcfc486a53f000f4577fc9aad53079223b2cce3e232e26d243bf2
            0d72a5d07ca459b0d8cf254be1a58aae99cc1f5239d335351672dd3eb7215439
            13b182fba88817a669d4028e1a1eb884fb8ccfafe856c90003c6c909f95c5606
            1c9adfb86aa1dbba5dd7d75fecfe2eaa0b1f682a1af49625c1109aede04f30c6
            214c108674a952e52064241a7675e9e1fc6269e7868eccaab7fa5972edc0aa03
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            07b2760ec756f5aff8c613ed25fac299ba3fa228f3e95e56dd9a91e1e7d787ee
            0bd53c7c3f87a7dd4b323f95b005faa20922832b3281cced2e8ebb018f36dfa5
            033e9b607a4ec18b47f7d639d683e8c0329ead3a4557fec4bd970cee860fd269
            2c0bf313892b42c20297a38e2bdc66d2f859d4e283c48c71e9de32c948988022
            2a0b8ffcdc601250534022784eedbff772c37be4ac7aaf6593e417099a4ebcc1
            09f3c1d80d5b8615a9f9e33d306c67bed253a142d1a54e9966a8e1fe56663d72
            2a4a9957eb31344adf76755cb8af8468478dfb8d2205621a7347740e6a9c96ee
            024fc0d0a82ad9accf816f264c61d360d02a286e54615dc27f9b0cfe291ce1b9
            27c86451e0be61a6c207c88c010e826be9fbac1741bcc05a62701c43f976d5da
            0bb655aa1edd2cdcb133006535c1464ce18820adaf2e761268c87ed98db1d72a
            22632c1a30ad540533e87cea5fabe040ad8c083c7206362b97236dd08ee42b39
            1a51b26cac831a8a1862059c788a6f22ef39b2fbea3216ccda74bb45e18ba0d6
            30145adbf246f339a7d499981ab6244b428ab44cee2d283bdb5ca38cc973b5b1
            0efebfcacbc9d361343ba36f9f9521cb8ca72964bd163d3428020048653e28d3
            2a2b6163fcd85d580e508c3ebe6a6ed03368f643a3a566274efadfc305292b4c
            13d99b115f91d35ac3ee1f971922cb73455199bf73fdd1f4c31b3dc1f9d0ccaa
            12b59d4d36025b0450b4603920535fc65f08acc2261e64ae134ee7337e08167f
            2aa8624527bc83d9c90dea371a50fcb6474868fd6a7219d3ba89db9df93cfd44
            06158b00e5a58b47e807261c531a594c12227cdbbcecb7f245b6cfea3533eac8
            1526583def3cbb125fda8e0017ac02f92f2fd1aa92f7f585f18f0b1f6248117b
            174078cf42e7ba99db9257c04a6adfed4be144e9ad99f5784a1bdacd73a6890d
            028156b9a09e836cac37aaaab1eacb475eac199bbf6d496ad296c187f44b841d
            198bc67924ebffffe15f934ad71f2e99a66b5740ff82a39ee2340b3eacf7affc
            1af2b24a2c8fdaa22d4640c15fab8c831e5ca6e3ec535304a49eaf390db4bcaf
            11beb6d692c69a2a1c76ab24fa835418cdb79de35ff08837d2e0f144048873c8
            1d352b820e5c329d0af5675379c37c97cc1639d8de50c9eaeca21a26bb91aba8
            0b0338f7bf4b55e7d95b37954322aa626a9a01a4f59ac0485b58048d26494b81
            16bd72e0bcba53c80eaf02709cdaf804209527583deac267939b6a301c0f365a
            27619217e83c7c41bb0d86706a4e3ef82c83a6b7930ab01353d8f54927f0fc17
            00964e91be0aaa54d566254574890267dd4fe8cc7468a3c2542b5c3238a6b428
            0757eebe0246553d2f2796cc3ef9bb1b0bd7ea2ec46ab9be01f0911f69dd2acd
            0949ca63526974f35ca0546be7559ebf82748a54130324d696443f1666aca9fd
            1dc55c5ce586d2c4487e400a3bad73bcb73f0602d0a119cde028cf94d70ae578
            0ba29a71cb26bf3fddffb89751cd47356c94808ab704a366ce15f486d2c11bd0
            0ba29a71cb26bf3fddffb89751cd47356c94808ab704a366ce15f486d2c11bd0
            06a500312323df703bdae0a9590986b9f94ef40e51f7137f86c7be5932672c0f
            20090ff67515054d05159daaa2e21e1f74a3a35e48ad40195a107708c80717b8
            1f744ebb85c3659daea9972222ebab6dde70a4378bef9a0d2fa393e03e1f7c98
            018673fa3e2f98fc7b4130387aa0c156c6b698efea7ad749bfe5d688e7c5f2d8
            137f716e12b51396d1e45a5616676597513a107e9b96135cb54e43469379b6bb
            1acefaabee60c9f4109175499e46106b8b4e18c716e24d3cbc86d60e84690c1c
            00000000000000000000000000000086a8d14a82f73355cfe1347be22cfd04a0
            00000000000000000000000000000000002ebd552301726d387b5194ec0cdd4c
            0000000000000000000000000000004100b6273e1437c228e17b65579b4fa38b
            00000000000000000000000000000000001a96937a684cf0bc812a88eab6235f
            0000000000000000000000000000001a5157401a912e7f8f95646ca91b35b5e4
            000000000000000000000000000000000014c8f2aff96260e5d32b56d05d6b73
            000000000000000000000000000000605937bec7dd13770fe1a0ab9c63a831c5
            000000000000000000000000000000000004b69cbb098a8e62355cf9b2bd73f3
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            000000000000000000000000000000e6a99f1fd0e59e5df26fd7c1c68cf02d47
            00000000000000000000000000000000002b38b63d24f5efeeb4b34862afecba
            000000000000000000000000000000b909e82d6df34d7529f6d3fcff1ab3cb11
            00000000000000000000000000000000000e7d1f45832f1e2ab06674dcca68f2
            0000000000000000000000000000007180e1d602d831ac8362bbfb2e145d9182
            00000000000000000000000000000000001830ae6a02b861fda3f91e4b6409d0
            000000000000000000000000000000cd09362360f9896f0b934bc44c30193f47
            000000000000000000000000000000000021c2d5c3610dc931c7d9a13401d6bd
            0000000000000000000000000000003e3e0502997168303334c7e23dab237c00
            00000000000000000000000000000000002b7c2257aee20191b9921055ba8fbb
            0000000000000000000000000000002974bd14c0c4d7d69de7e51fd52c7e7a85
            00000000000000000000000000000000002ce710f075ebd73c8c4922d4dbb570
            000000000000000000000000000000ae13faecbe744ed7f0ea3af1a0b25ace5d
            000000000000000000000000000000000000a18bec9ccf554273ee3d13a0600e
            00000000000000000000000000000061c29036fdd75b0f0c68a6993f0d34d369
            000000000000000000000000000000000021aab4cfcd6d769df0c871baee8b0c
            0000000000000000000000000000000000000000000000000000000000000001
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000002
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000001
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000002
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000001
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000002
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000001
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000002
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000001
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000002
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000001
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000002
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000001
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000002
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000001
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000002
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000001
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000002
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000001
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000002
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000001
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000002
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000001
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000002
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000001
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000002
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000001
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000002
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000001
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000002
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000001
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000002
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000001
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000002
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000001
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000002
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000001
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000002
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000001
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000002
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000001
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000002
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000001
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000002
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000001
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000002
            0000000000000000000000000000000000000000000000000000000000000000
            277b95641ed49cf45470a593378d53ae4a15174a98244719b9d4a08f058f7937
            29d3de076ada43315c17670a0226f121a20dd298001fa2603f47276b01011fe0
            041d9378d7cb98326129d5f1fbc7ad8c874edb5213d58b88b480c7965382c691
            267a439f17c6cc3cf17d819182c7ef7c166b73d4b4c7c66de9a343f71cf17860
            013f19023562aa3750f9d03548115b108b98a7293500e0db5d875bed1dcaf6b4
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            0000000000000000000000000000000000000000000000000000000000000000
            1b56085f77d3123bb9620b0b280dab3e2fee00586f960d7b3736d138a90dcf58
            15276f97e6f3e755ae4ed0b778d72fb5cbd877b483e10c0e557e37a0bc4ef6c7
            2dc09d7a50f31d0cf2f3617332788b916200bc46d69ab87875b4aa9e9af3fbdc
            2e85d3f512329df40d43121c2a891eeb7d61a9f0f09b4f49c21407a4fa819694
            000000000000000000000000000000178cde23c927d8e6d18055eaa14d7dac21
            000000000000000000000000000000000017afaa1188e87af0c5bd574cbbdd92
            00000000000000000000000000000034ef865dec522f546d0b450d87e254947e
            000000000000000000000000000000000029b6564c093a03f76b0a8eb32c0bc6
            000000000000000000000000000000ea086966e36230db4b82fd1b8999e7d07e
            000000000000000000000000000000000000345fe675f3411e5f427fc2f88363
            0000000000000000000000000000005ba76c9f5f9abfd9d2fbc80f4b8258644a
            00000000000000000000000000000000002efd831818cefe67fbe08865626d68
            "
        )
    }

    #[rstest]
    fn parse_valid_zk_proof(valid_zk_proof: [u8; ZK_PROOF_SIZE]) {
        assert!(ZKProof::try_from(&valid_zk_proof[..]).is_ok());
    }

    mod reject {
        use super::*;

        #[rstest]
        fn a_zk_proof_from_a_short_buffer(valid_zk_proof: [u8; ZK_PROOF_SIZE]) {
            let invalid_zk_proof = &valid_zk_proof[..ZK_PROOF_SIZE - 1];
            assert_eq!(
                ZKProof::try_from(invalid_zk_proof),
                Err(ProofError::IncorrectBufferSize {
                    expected_size: ZK_PROOF_SIZE,
                    actual_size: invalid_zk_proof.len()
                })
            );
        }

        // NOTE: The following test will fail because validation is not done during parsing.
        // #[rstest]
        // fn a_zk_proof_with_a_point_not_on_curve() {
        //     let invalid_zk_proof = [0u8; ZK_PROOF_SIZE];

        //     assert_eq!(
        //         ZKProof::try_from(&invalid_zk_proof[..]),
        //         Err(ProofError::PointNotOnCurve)
        //     );
        // }
    }
}
